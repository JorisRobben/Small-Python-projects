EMPTY_SPACE = "."
GRID_LENGTH = 9
FULL_GRID_SIZE = GRID_LENGTH*GRID_LENGTH
COLUMNS = ["A","B","C","D","E","F","G","H","I"]

class sudoku_grid:
  def __init__(self, originalSetup):
    # originalSetup is a string of 81 characters for the puzzle
    # setup, with numbers and periods (for the blank spaces).
    # See https://inventwithpython.com/sudokupuzzles.txt
    self.originalSetup = originalSetup
    self.grid = {}

  def reset_grid(self):
    for i in range(1, GRID_LENGTH + 1):
      for j in range(1, GRID_LENGTH + 1):
        self.grid[(i,j)] = EMPTY_SPACE

    assert len(self.originalSetup) == FULL_GRID_SIZE, "Please provide a valid sudoku puzzle."

    i = 0
    while i < FULL_GRID_SIZE:
      for x in range(1, GRID_LENGTH + 1):
        for y in range(1, GRID_LENGTH + 1):
          self.grid[(x,y)] = self.originalSetup[i]
          i += 1

  def display(self):
    print("   A B C   D E F   G H I   ")
    for x in range(1, GRID_LENGTH + 1):
      print(x, end = "  ")
      for y in range(1, GRID_LENGTH + 1):
        if y == 3 or y == 6:
          print(self.grid[(x,y)] + " | ", end = "")
        else:
          print(self.grid[(x,y)] + " ", end = "")
      print("")
      if x == 3 or x == 6:
        print("   ------+-------+------")
      if y == 3 or y == 6:
        print("   ------+-------+------")

  def check_move(self, column, row, number):
    return bool(column in COLUMNS and int(row) in range(1, GRID_LENGTH + 1) and int(number) in range(1, GRID_LENGTH + 1))

  def make_move(self, column, row, number):
    if self.check_move(column, row, number) == True:
      col = COLUMNS.index(column)+1
      row = int(row)
      if self.grid[(row, col)] == EMPTY_SPACE:
        self.grid[(row, col)] = number
      else:
        print("That space is already taken.")
    else:
      print("That's not a valid move.")

  def is_complete_set_of_numbers(self, numbers):
    return bool(sorted(numbers) == list("123456789"))

  def is_solved(self):
    #check if rows are complete
    row = ""
    for i in range(1, GRID_LENGTH + 1):
      for j in range(1, GRID_LENGTH + 1):
        row += self.grid[(i,j)]
      if self.is_complete_set_of_numbers(row):
        return True
      else:
        row = ""
    #check if columns are complete
    col = ""
    for i in range(1, GRID_LENGTH + 1):
      for j in range(1, GRID_LENGTH + 1):
        col += self.grid[(j,i)]
      if self.is_complete_set_of_numbers(col):
        return True
      else:
        col = ""
    #check if squares are complete
    square = ""
    for i in (1,4,7):
      for j in (1,4,7):
        x=i
        y=j
        while x < i+3:
          while y < j+3:
            square += self.grid[(x,y)]
            y += 1
          y = j
          x += 1
        if self.is_complete_set_of_numbers(square):
          return True
    return False

def main():
  sudoku = sudoku_grid("1234.6789.453.53416788564....81.29..7.......8..67.82....26.95238..2.3789985.1.64.")
  sudoku.reset_grid()
  sudoku.display()
  player_move_col = input("Enter your column (A-I): ")
  player_move_row = input("Enter your row (1-9): ")
  player_move_num = input("Enter your number (1-9): ")
  sudoku.make_move(player_move_col, player_move_row, player_move_num)
  if sudoku.is_solved():
    print("You win")
  else:
    print("You haven't won yet!")
  sudoku.display()

main()
